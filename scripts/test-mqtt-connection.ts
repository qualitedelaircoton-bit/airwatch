#!/usr/bin/env tsx

import mqtt from 'mqtt'

console.log('üîå Test de connexion MQTT - Configuration compl√®te\n')

// Utiliser une variable d'environnement pour l'adresse du broker
const brokerHost = process.env.MQTT_BROKER_HOST || 'localhost'
const configs = [
  { name: 'TCP Standard', port: 1883, protocol: 'mqtt' },
  { name: 'SSL/TLS', port: 8883, protocol: 'mqtts' },
  { name: 'WebSocket', port: 8083, protocol: 'ws' },
  { name: 'WebSocket SSL', port: 8084, protocol: 'wss' }
]

console.log('üìã Configuration EMQX d√©tect√©e:')
console.log('  ‚Ä¢ tcp    0.0.0.0:1883  (0/Infinity connections)')
console.log('  ‚Ä¢ ssl    0.0.0.0:8883  (0/Infinity connections)')  
console.log('  ‚Ä¢ ws     0.0.0.0:8083  (0/Infinity connections)')
console.log('  ‚Ä¢ wss    0.0.0.0:8084  (0/Infinity connections)')
console.log('\nüéØ Objectif: √âtablir AU MOINS une connexion pour passer de 0 √† 1\n')

// Construire l'URL pour chaque configuration
for (const config of configs) {
  console.log(`\nüì° Test ${config.name}...`)
  console.log(`   Protocol: ${config.protocol}`)
  console.log(`   Port: ${config.port}`)
  console.log(`   TLS: ${config.tls ? 'activ√©' : 'd√©sactiv√©'}`)
  
  const brokerUrl = `${config.protocol}://${brokerHost}:${config.port}`
  
  const options = {
    clientId: `test-${config.name.toLowerCase().replace(/[^a-z]/g, '')}-${Date.now()}`,
    clean: true,
    connectTimeout: 8000,
    keepalive: 30,
    reconnectPeriod: 0, // Pas de reconnexion auto pour ce test
    rejectUnauthorized: false,
    // PAS de username/password - broker ouvert
  }
  
  try {
    const result = await testSingleConnection(config, brokerHost, options)
    if (result) {
      console.log(`‚úÖ SUCC√àS! Connexion √©tablie sur ${config.name}`)
      console.log(`üìä Votre EMQX devrait maintenant montrer 1 connexion active`)
      return { success: true, config }
    }
  } catch (error) {
    console.error(`‚ùå ${config.name}: ${error.message}`)
    if (error.code === 'CONNACK_TIMEOUT' || 
        error.code === 'ECONNREFUSED' || 
        error.code === 'ETIMEDOUT') {
      console.log('üî• Erreurs r√©seau probables:')
      console.log('   ‚Ä¢ Firewall bloquant la connexion')
      console.log('   ‚Ä¢ Serveur MQTT inaccessible')
      console.log('   ‚Ä¢ Port ferm√© ou non configur√©')
      console.log('   ‚Ä¢ Probl√®me de routage r√©seau')
    }
  }
}

return { success: false, config: null }

function testSingleConnection(config: any, host: string, options: any): Promise<boolean> {
  return new Promise((resolve, reject) => {
    const brokerUrl = `${config.protocol}://${host}:${config.port}`
    console.log(`   üîå Connexion √† ${brokerUrl}...`)
    
    const client = mqtt.connect(brokerUrl, options)
    let resolved = false
    
    const cleanup = () => {
      if (!resolved) {
        resolved = true
        client.removeAllListeners()
        client.end(true)
      }
    }
    
    client.on('connect', (connack) => {
      console.log(`   ‚úÖ Connect√©! (connack: ${JSON.stringify(connack)})`)
      
      // Test d'abonnement pour v√©rifier la fonctionnalit√© compl√®te
      client.subscribe('test/topic', { qos: 1 }, (err, granted) => {
        if (err) {
          console.log(`   ‚ö†Ô∏è Erreur abonnement: ${err.message}`)
        } else {
          console.log(`   üì° Abonnement r√©ussi: ${JSON.stringify(granted)}`)
        }
        
        // Maintenir la connexion 3 secondes pour v√©rifier la stabilit√©
        setTimeout(() => {
          console.log(`   üîó Connexion stable pendant 3s`)
          cleanup()
          resolve(true)
        }, 3000)
      })
    })
    
    client.on('error', (error) => {
      console.log(`   ‚ùå Erreur: ${error.message}`)
      cleanup()
      reject(error)
    })
    
    client.on('close', () => {
      console.log(`   üîå Connexion ferm√©e`)
    })
    
    client.on('offline', () => {
      console.log(`   üì¥ Client hors ligne`)
    })
    
    // Timeout plus long pour connexions SSL/WS
    const timeout = config.protocol.includes('s') || config.protocol.includes('ws') ? 12000 : 8000
    setTimeout(() => {
      if (!resolved) {
        cleanup()
        reject(new Error(`Timeout apr√®s ${timeout/1000}s`))
      }
    }, timeout)
  })
}

// Test de maintien de connexion permanente
async function testPermanentConnection(config: any) {
  console.log(`\nüîÑ Test de connexion permanente sur ${config.name}...`)
  
  const brokerUrl = `${config.protocol}://${brokerHost}:${config.port}`
  const options = {
    clientId: `permanent-listener-${Date.now()}`,
    clean: true,
    connectTimeout: 10000,
    keepalive: 60,
    reconnectPeriod: 5000, // Reconnexion automatique
    rejectUnauthorized: false,
  }
  
  const client = mqtt.connect(brokerUrl, options)
  
  client.on('connect', () => {
    console.log('‚úÖ Connexion permanente √©tablie!')
    console.log('üì° Abonnement aux topics de capteurs...')
    
    // S'abonner aux topics de donn√©es comme la vraie plateforme
    client.subscribe('sensors/+/data', { qos: 1 }, (err) => {
      if (err) {
        console.error('‚ùå Erreur abonnement sensors:', err)
      } else {
        console.log('‚úÖ Abonn√© √† sensors/+/data')
      }
    })
    
    console.log('\nüéØ Connexion maintenue - V√©rifiez votre dashboard EMQX:')
    console.log('   ‚Ä¢ Connections devrait passer de 0 √† 1')
    console.log('   ‚Ä¢ Subscriptions devrait montrer sensors/+/data')
    console.log('\n‚è±Ô∏è Maintien pendant 30 secondes puis arr√™t...')
  })
  
  client.on('message', (topic, payload) => {
    console.log(`üì© Message re√ßu sur ${topic}: ${payload.toString().substring(0, 100)}...`)
  })
  
  client.on('error', (error) => {
    console.error('‚ùå Erreur connexion permanente:', error.message)
  })
  
  client.on('reconnect', () => {
    console.log('üîÑ Reconnexion en cours...')
  })
  
  // Maintenir 30 secondes puis nettoyer
  setTimeout(() => {
    console.log('\nüõë Arr√™t du test de connexion permanente')
    client.end()
    process.exit(0)
  }, 30000)
}

// Ex√©cution principale
testEMQXConnection()
  .then(async (result) => {
    if (result.success) {
      console.log(`\nüéâ DIAGNOSTIC: Connexion possible sur ${result.config.name}`)
      console.log('üîß SOLUTION: Utiliser cette configuration dans mqtt-listener.ts')
      
      // Lancer le test permanent sur la config qui marche
      await testPermanentConnection(result.config)
    } else {
      console.log('\n‚ùå DIAGNOSTIC: Aucune connexion possible')
      console.log('üîç CAUSES POSSIBLES:')
              console.log('   ‚Ä¢ Firewall bloquant la connexion au broker')
      console.log('   ‚Ä¢ EMQX non d√©marr√© ou inaccessible')
      console.log('   ‚Ä¢ R√©seau local/VPN bloquant les ports')
      console.log('   ‚Ä¢ Configuration EMQX limitant les connexions externes')
      process.exit(1)
    }
  })
  .catch((error) => {
    console.error('\nüí• Erreur fatale:', error.message)
    process.exit(1)
  }) 